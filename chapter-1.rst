.. _chapter-1:

***************************
第一章 教程介绍与词法分析器
***************************

`本章原文`__

__ http://llvm.org/docs/tutorial/LangImpl1.html

教程介绍
========

欢迎来到本教程——“用LLVM开发新语言”。本教程详细描述了一门简单语言的实现过程，同时也展示了这个过程是多么的简单和有趣。本教程将会带您起步，同时协助您构建一个可用以扩展成其他语言框架。教程中的代码可以作为尝试LLVM中其他相关功能的试验田。

本教程的目的在于渐进地揭示我们的语言，详述它的构建过程。期间我们将广泛覆盖有关语言设计和LLVM用法的大量问题。我们会沿途展示和阐述相关的代码，让你不至被大量的细节弄得晕头转向。

得提前说明的是，本教程教授的是编译器技术和LLVM，\ **不是**\ 健全的、现代化的软件工程原则。在实际操作中，这意味着我们将走一些捷径以简化阐述。比如代码中会有内存泄漏、到处是全局变量、不会用到visitor等良好的模式等等……一切从简。如果您打算深究这些代码以作为未来项目的基础，填补这些缺陷也并不是什么难事。

我对教程内容按章节进行了组织，如果您对某些内容很熟悉或不感兴趣便可直接跳过。教程结构如下：

- :doc:`第一章 <chapter-1>`\ ：\ **Kaleidoscope语言的结构，以及词法解析器的定义**\ ——说明我们想要做些什么以及希望新语言具备的功能。为了最大限度地令这份教程易于理解和修改，我们选用C++而不使用任何的词法和语法分析器的生成器。当然LLVM可以很好地与这些工具协作，如果愿意你大可选择一种来用。

- :doc:`第二章 <chapter-2>`\ ：\ **实现语法分析器和AST**\ ——词法分析器到位后，我们便可以开始讨论语法分析技术和基本的AST构建。

基础语言
========

词法分析器
==========

.. vim:ft=rst ts=4 sw=4 fenc=utf-8 enc=utf-8 et wrap
